USE GRAPH AMLSim

CREATE QUERY accountActivity() FOR GRAPH AMLSim { 
  
  SumAccum<DOUBLE> @s_sumAmt, @r_sumAmt;
  SumAccum<DOUBLE> @s_txCnt, @r_txCnt;
  MinAccum<DOUBLE> @s_minAmt, @r_minAmt;
  MaxAccum<DOUBLE> @s_maxAmt, @r_maxAmt;
  AvgAccum @s_avgAmt, @r_avgAmt;

  
  
  Seed = {Account.*};
  
  acctSend = SELECT tgt FROM Seed:s -(SEND_TRANSACTION:e)-> Transaction:tgt
             ACCUM s.@s_sumAmt += tgt.amount, 
                   s.@s_txCnt += 1,
                   s.@s_minAmt += tgt.amount, 
                   s.@s_maxAmt += tgt.amount,
                   s.@s_avgAmt += tgt.amount
            POST-ACCUM
                s.current_balance = s.@s_sumAmt - s.init_balance,
                s.min_send_tx = s.@s_minAmt,
                s.max_send_tx = s.@s_maxAmt,
                s.avg_send_tx = s.@s_avgAmt,
                s.cnt_send_tx = s.@s_txCnt;
                

  
  acctRecieve = SELECT tgt FROM Seed:s -(reverse_RECEIVE_TRANSACTION:e)-> Transaction:tgt
                ACCUM s.@r_sumAmt += tgt.amount, 
                      s.@r_txCnt += 1,
                      s.@r_minAmt += tgt.amount, 
                      s.@r_maxAmt += tgt.amount,
                      s.@r_avgAmt += tgt.amount
                      
                POST-ACCUM
                  s.current_balance = s.@r_sumAmt + s.init_balance,
                  s.min_recieve_tx = s.@r_minAmt,
                  s.max_recieve_tx = s.@r_maxAmt,
                  s.avg_recieve_tx = s.@r_avgAmt,
                  s.cnt_recieve_tx = s.@r_txCnt;
              
  PRINT "Features Have Been Calculated";

}
CREATE QUERY accountInfo(INT limit_x) FOR GRAPH AMLSim { 
  
  /*
    Grabs the account info for limit_x accounts
  */
  
  Seed = {Account.*};
  
  S3 = SELECT a FROM Seed:a 
         LIMIT limit_x;
  
  PRINT S3; 
  
}

INTERPRET QUERY () FOR GRAPH AMLSim { 
  seed = {Account.*};
  S1 = SELECT s FROM seed:s WHERE s.id == "9913"; 
  PRINT S1; 
}

CREATE QUERY label_prop (SET<STRING> v_type, SET<STRING> e_type, INT max_iter, INT output_limit, BOOL print_accum = TRUE, STRING file_path = "", STRING attr = "") FOR GRAPH AMLSim{
# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

        OrAccum @@changed = true;
        MapAccum<INT, INT> @map;     # <communityId, numNeighbors>
        MapAccum<INT, INT> @@commSizes;   # <communityId, members>
        SumAccum<INT> @label, @num;  
        FILE f (file_path);
        Start = {v_type};

# Assign unique labels to each vertex
        Start = SELECT s FROM Start:s ACCUM s.@label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
        WHILE @@changed == true LIMIT max_iter DO
                @@changed = false;
                Start = SELECT s 
                        FROM Start:s -(e_type:e)-> :t
                        ACCUM t.@map += (s.@label -> 1)  # count the occurrences of neighbor's labels
                        POST-ACCUM
                                INT maxV = 0,
                                INT label = 0,
                                # Iterate over the map to get the neighbor label that occurs most often
                                FOREACH (k,v) IN t.@map DO
                                        CASE WHEN v > maxV THEN
                                                maxV = v,
                                                label = k
                                        END
                                END,
                                # When the neighbor search finds a label AND it is a new label
                                # AND the label's count has increased, update the label.
                                CASE WHEN label != 0 AND t.@label != label AND maxV > t.@num THEN
                                        @@changed += true,
                                        t.@label = label,
                                        t.@num = maxV
                                END,
                                t.@map.clear();
        END;

        Start = {v_type};
        Start =  SELECT s FROM Start:s
                  POST-ACCUM 
                        IF attr != "" THEN s.setAttr(attr, s.@label) END,
                        IF file_path != "" THEN f.println(s, s.@label) END,
                        IF print_accum THEN @@commSizes += (s.@label -> 1) END
                  LIMIT output_limit;

        IF print_accum THEN 
           PRINT @@commSizes;
           PRINT Start[Start.@label];
        END;
}

CREATE QUERY pageRank (STRING v_type, STRING e_type,
 FLOAT max_change=0.001, INT max_iter=25, FLOAT damping=0.85, INT top_k = 100,
 BOOL print_accum = TRUE, STRING result_attr =  "", STRING file_path = "",
 BOOL display_edges = FALSE) FOR GRAPH AMLSim{
/*
 Compute the pageRank score for each vertex in the GRAPH
 In each iteration, compute a score for each vertex:
     score = (1-damping) + damping*sum(received scores FROM its neighbors).
 The pageRank algorithm stops when either of the following is true:
 a) it reaches max_iter iterations;
 b) the max score change for any vertex compared to the last iteration <= max_change.
 v_type: vertex types to traverse          print_accum: print JSON output
 e_type: edge types to traverse            result_attr: INT attr to store results to
 max_iter; max #iterations                 file_path: file to write CSV output to
 top_k: #top scores to output              display_edges: output edges for visualization
 max_change: max allowed change between iterations to achieve convergence
 damping: importance of traversal vs. random teleport

 This query supports only taking in a single edge for the time being (8/13/2020).
*/
	TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
	HeapAccum<Vertex_Score>(top_k, score DESC) @@topScores;
	MaxAccum<FLOAT> @@max_diff = 9999;    # max score change in an iteration
	SumAccum<FLOAT> @recvd_score = 0; # sum of scores each vertex receives FROM neighbors
	SumAccum<FLOAT> @score = 1;           # initial score for every vertex is 1.
	SetAccum<EDGE> @@edgeSet;             # list of all edges, if display is needed
	FILE f (file_path);

# PageRank iterations	
	Start = {v_type};                     # Start with all vertices of specified type(s)
	WHILE @@max_diff > max_change LIMIT max_iter DO
			@@max_diff = 0;
			V = SELECT s
				FROM Start:s -(e_type:e)-> v_type:t
				ACCUM t.@recvd_score += s.@score/(s.outdegree(e_type)) 
				POST-ACCUM s.@score = (1.0-damping) + damping * s.@recvd_score,
						   s.@recvd_score = 0,
						   @@max_diff += abs(s.@score - s.@score');
	END; # END WHILE loop

# Output
	IF file_path != "" THEN
	  f.println("Vertex_ID", "PageRank");
	END;

	V = SELECT s FROM Start:s
		POST-ACCUM 
			IF result_attr != "" THEN s.setAttr(result_attr, s.@score) END,
			IF file_path != "" THEN f.println(s, s.@score) END,
			IF print_accum THEN @@topScores += Vertex_Score(s, s.@score) END;

	IF print_accum THEN
		PRINT @@topScores;
		IF display_edges THEN
			PRINT Start[Start.@score];
			Start = SELECT s
					FROM Start:s -(e_type:e)-> v_type:t
					ACCUM @@edgeSet += e;
		   PRINT @@edgeSet;
		END;
	END;
}

CREATE QUERY selectAccount(STRING acct) FOR GRAPH AMLSim { 
  seed = {Account.*};
  S1 = SELECT s FROM seed:s WHERE s.id == acct; 
  PRINT S1; 
}

CREATE QUERY selectAccountTx(STRING acct) FOR GRAPH AMLSim { 
  ListAccum<EDGE> @@txSend, @@txRecieve;
  seed = {Account.*};
 
  SendTx = SELECT tgt FROM seed:s -(SEND_TRANSACTION:e)-> Transaction:tgt
           WHERE s.id == acct
           ACCUM @@txSend +=  e;
 
  RecieveTx = SELECT tgt FROM seed:s -(reverse_RECEIVE_TRANSACTION:e)-> Transaction:tgt
              WHERE s.id == acct
              ACCUM @@txRecieve += e;
 
  PRINT @@txSend, @@txRecieve; 
}

CREATE QUERY selectTopPageRank() FOR GRAPH AMLSim { 
  seed = {Account.*};
  S1 = SELECT s FROM seed:s ORDER BY s.pagerank DESC LIMIT 10;
  PRINT S1; 
}

CREATE QUERY txMultiHopLimit() FOR GRAPH AMLSim SYNTAX v2 { 

  /*
    This query grabs all of the features and returns it.
  */
  
  TYPEDEF TUPLE <BOOL tx_fraud, DOUBLE tx_amount, FLOAT s_pagerank, INT s_label, DOUBLE s_min_send_tx, DOUBLE s_min_receieve_tx, DOUBLE s_max_send_tx, DOUBLE s_max_recieve_tx, DOUBLE s_avg_send_tx, DOUBLE s_avg_recieve_tx, INT s_cnt_recieve_tx, INT s_cnt_send_tx, INT s_timestamp, FLOAT r_pagerank, INT r_label, DOUBLE r_min_send_tx, DOUBLE r_min_receieve_tx, DOUBLE r_max_send_tx, DOUBLE r_max_recieve_tx, DOUBLE r_avg_send_tx, DOUBLE r_avg_recieve_tx, INT r_cnt_recieve_tx, INT r_cnt_send_tx, INT r_timestamp> ORDER_TX;
  ListAccum<ORDER_TX> @@txRecords;
  
  Seed = {Transaction.*};
  
  acctSend = SELECT tgt FROM Seed:s -( (reverse_SEND_TRANSACTION> |  RECEIVE_TRANSACTION>):e)- Account:tgt
      ACCUM @@txRecords += ORDER_TX(s.is_fraud, s.amount, tgt.pagerank, tgt.label, tgt.min_send_tx, tgt.min_recieve_tx, tgt.max_send_tx, tgt.max_recieve_tx, tgt.avg_send_tx, tgt.avg_recieve_tx, tgt.cnt_recieve_tx, tgt.cnt_send_tx, e.ts, tgt.pagerank, tgt.label, tgt.min_send_tx, tgt.min_recieve_tx, tgt.max_send_tx, tgt.max_recieve_tx, tgt.avg_send_tx, tgt.avg_recieve_tx, tgt.cnt_recieve_tx, tgt.cnt_send_tx, e.ts);


  PRINT @@txRecords;
  
}
